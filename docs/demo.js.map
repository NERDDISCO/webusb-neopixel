{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/hsl-to-rgb-lightweight/index.js","webpack:///./demo/index.js","webpack:///./controller.js","webpack:///./demo/dev-console.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","HLSToRGB","[object Object]","hue","saturation","lightness","undefined","g","b","chroma","Math","abs","huePrime","component2","floor","lightAdj","round","controller","args","this","device","filters","vendorId","productId","leds","Array","fill","navigator","usb","requestDevice","then","selectedDevice","getDevices","devices","getPairedDevice","Promise","resolve","reject","Error","connect","open","configuration","selectConfiguration","claimInterface","controlTransferOut","requestType","recipient","request","index","readLoop","transferIn","result","amountLeds","Uint8Array","data","buffer","console","log","error","from","transferOut","led","isArray","splice","length","send","close","devConsole","output","logLedsElement","logLedsEnabled","addEventListener","e","target","checked","message","type","fullMessage","JSON","stringify","scrollTop","scrollHeight","productName","configurations","deviceClass","deviceProtocol","deviceSubclass","deviceVersionMajor","deviceVersionMinor","deviceVersionSubminor","manufacturerName","opened","serialNumber","usbVersionMajor","usbVersionMinor","usbVersionSubminor","vendorIdHex","toString","productIdHex","universe","document","getElementById","activateButton","disconnectButton","setChannelForm","playBlack","playRainbow","isAnimationPlaying","enable","logUsbDevice","catch","disconnect","autoConnect","preventDefault","FormData","channel","parseInt","color","match","map","v","update","logLeds","innerHTML","loop","colorIndex","rgb","convert","requestAnimationFrame"],"mappings":"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","file":"demo.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n  * Converts an hsl color to RGB.\n  */\nexport class HLSToRGB{\n\n  /**\n   * Converts an hsl color to RGB.\n   * based on algorithm from\n   * http://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n   *\n   * @param {number} Expected hue range: [0, 360)\n   * @param {number} Expected saturation range: [0, 1]\n   * @param {number} Expected lightness range: [0, 1]\n   * @return {number} An array of rgb values. EXAMPLE: [100, 100, 100]\n   */\n  static convert (hue, saturation, lightness) {\n\n    if( hue == undefined ){\n      return [0, 0, 0];\n    }\n\n    var chroma = (1 - Math.abs((2 * lightness) - 1)) * saturation;\n    var huePrime = hue / 60;\n    var component2 = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n    huePrime = Math.floor(huePrime);\n    var r;\n    var g;\n    var b;\n\n    switch (huePrime) {\n      case 0:\n        r = chroma;\n        g = component2;\n        b = 0;\n        break;\n      case 1:\n        r = component2;\n        g = chroma;\n        b = 0;\n        break;\n      case 2:\n        r = 0;\n        g = chroma;\n        b = component2;\n        break;\n      case 3:\n        r = 0;\n        g = component2;\n        b = chroma;\n        break;\n      case 4:\n        r = component2;\n        g = 0;\n        b = chroma;\n        break;\n      case 5:\n        r = chroma;\n        g = 0;\n        b = component2;\n        break;\n      default:\n        throw 'Incorrect format for an hsl color.'\n              'Please, read the documentation.';\n    }\n\n    var lightAdj = lightness - (chroma / 2);\n    r += lightAdj;\n    g += lightAdj;\n    b += lightAdj;\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n  };\n}\n","import Controller from '../controller.js'\nimport DevConsole from './dev-console.js'\n\nimport { HLSToRGB } from 'hsl-to-rgb-lightweight'\n\nconst leds = 60\nconst ledBytes = leds * 3\nconst delay = 1\n\nconst controller = window.controller = new Controller({ leds: new Array(ledBytes).fill(0) })\nconst devConsole = new DevConsole({\n  output : document.getElementById('console'),\n  logLedsElement : document.getElementById('logLeds')\n})\n\nconst activateButton = document.getElementById('activateWebUsb')\nconst disconnectButton = document.getElementById('disconnectWebUsb')\n\nconst setChannelForm = document.getElementById('updateAnyChannel')\n\nconst playBlack = document.getElementById('animationBlack')\nconst playRainbow = document.getElementById('animationRainbow')\nlet isAnimationPlaying = false\n\n\n// Listen for click events on the activate button\nactivateButton.addEventListener('click', e => {\n\n  // Enable WebUSB and select the Arduino\n  controller.enable().then(() => {\n\n    // Create a connection to the selected Arduino\n    controller.connect().then(() => {\n\n      // Successfully created a connection to the device\n      devConsole.logUsbDevice(controller.device)\n    })\n  })\n  .catch(() => {\n    devConsole.log('No USB device was selected', '', 'string')\n  })\n\n})\n\n\n\n// Disconnect from USB device\ndisconnectButton.addEventListener('click', e => {\n  controller.disconnect().then(() => {\n    devConsole.log('Destroyed connection to USB device, but USB device is still paired with the browser', '', 'string')\n  })\n})\n\n\n\n// Automatically connect to paired USB device\ncontroller.autoConnect()\n  .then(() => {\n    devConsole.log('Found an already paired USB device', '', 'string')\n    devConsole.logUsbDevice(controller.device)\n  })\n  .catch((error) => {\n    devConsole.log('autoConnect:', error, 'string')\n  })\n\n\n\n// Listen for submit events to change the value of a channel\nsetChannelForm.addEventListener('submit', e => {\n  e.preventDefault()\n\n  // Get data out of form\n  const data = new FormData(setChannelForm)\n\n  // Parse the data into an Integer\n  const channel = parseInt(data.get('channel'), 10)\n  const color = data.get('color').match(/[A-Za-z0-9]{2}/g).map(v => parseInt(v, 16))\n\n  devConsole.log('---', '', 'string')\n  devConsole.log(`Set LED ${channel} to ${color}`, '', 'string')\n\n  // Update the leds\n  controller.update(channel, color)\n  .then(() => {\n    devConsole.logLeds(controller.leds)\n  })\n  .catch((error) => {\n    devConsole.logLeds(controller.leds)\n    devConsole.log(error, '', 'string')\n  })\n})\n\n// Listen for click events on the black animation button\nplayBlack.addEventListener('click', e => {\n  controller.leds.splice(0, controller.leds.length, ...new Array(ledBytes).fill(0))\n\n  devConsole.log('Set all NeoPixel to black', '', 'string')\n\n  controller.send(controller.leds)\n  .then(() => {\n    devConsole.logLeds(controller.leds)\n  })\n  .catch(error => {\n    devConsole.logLeds(controller.leds)\n    devConsole.log(error, '', 'string')\n  })\n})\n\n// Listen for click events on the rainbow animation button\nplayRainbow.addEventListener('click', e => {\n  isAnimationPlaying = !isAnimationPlaying\n  playRainbow.innerHTML = playRainbow.innerHTML === 'Play' ? 'Pause' : 'Play'\n\n  if (isAnimationPlaying) {\n    devConsole.log('Started Rainbow animation', '', 'string')\n\n    loop()\n  } else {\n    devConsole.log('Stopped Rainbow animation', '', 'string')\n  }\n})\n\n\nlet colorIndex = 0\n\nconst loop = () => {\n  if (isAnimationPlaying) {\n\n    for (let i = 0; i < leds; i++) {\n      let rgb = HLSToRGB.convert((colorIndex + (i * delay)) % 360, 1, 0.4)\n      controller.leds.splice(i * 3, rgb.length, ...rgb)\n    }\n\n    colorIndex = ++colorIndex > 360 ? 0 : colorIndex\n      \n    // Send the updated leds to the controller\n    controller.send(controller.leds)\n    .then(() => {\n    })\n    .catch(error => {\n      devConsole.logLeds(controller.leds)\n      devConsole.log(error, '', 'string')\n    })\n\n    window.requestAnimationFrame(loop)\n  }\n}","/**\n * The controller is creating a connection to the USB device (Arduino) to send data over WebUSB.\n * By using the default <code>args</code> you will only see the following Arduino in the user prompt:\n * - Arduino Leonardo\n * - Arduino Leonardo ETH\n * - Seeeduino Lite\n * @module Controller\n *\n * @param {Object} args - Arguments to configure the controller\n * @param {Object[]} args.filters - List of devices that are whitelisted when opening the user prompt to select an Arduino\n * @param {Object} args.device - The selected Arduino to use as the controller\n * @param {number[]} args.leds - Holds all the values for each led of the leds\n * @example\n * import Controller from 'webusb-neopixel-controller/controller.js'\n *\n * // Create a new controller using the default properties\n * const controller = new Controller()\n */\nexport default class Controller {\n\n  constructor(args = {}) {\n    // Reference to the selected USB device\n    this.device = args.device || undefined\n\n    // Only allow specific USB devices\n    this.filters = args.filters || [\n      // Arduino Leonardo\n      { vendorId: 0x2341, productId: 0x8036 },\n      { vendorId: 0x2341, productId: 0x0036 },\n      { vendorId: 0x2a03, productId: 0x8036 },\n      { vendorId: 0x2a03, productId: 0x0036 },\n\n      // Arduino Leonardo ETH\n      { vendorId: 0x2a03, productId: 0x0040 },\n      { vendorId: 0x2a03, productId: 0x8040 },\n\n      // Seeeduino Lite\n      { vendorId: 0x2886, productId: 0x8002 }\n    ]\n\n    // Initialize the array that holds the NeoPixels\n    this.leds = new Array(args.leds * 3).fill(0)\n  }\n\n  /**\n   * Enable WebUSB and save the selected Arduino into <code>controller.device</code>\n   *\n   * Note: This function has to be triggered by a user gesture\n   *\n   * @return {Promise}\n   *\n   * @example\n   * controller.enable().then(() => {\n   *   // Create a connection to the selected Arduino\n   *   controller.connect().then(() => {\n   *     // Successfully created a connection\n   *   })\n   * })\n   * .catch(error => {\n   *   // No Arduino was selected by the user\n   * })\n   */\n  enable() {\n    // Request access to the USB device\n    return navigator.usb.requestDevice({ filters: this.filters })\n\n    // selectedDevice = the USB device that was selected by the user in the browser\n    .then(selectedDevice => {\n      this.device = selectedDevice\n    })\n  }\n\n  /**\n   * Get a USB device that was already paired with the browser.\n   *\n   * @return {Promise}\n   */\n  getPairedDevice() {\n    return navigator.usb.getDevices()\n\n    .then(devices => {\n      return devices[0]\n    })\n  }\n\n  /**\n   * Automatically connect to a USB device that was already paired with the Browser and save it into <code>controller.device</code>\n   *\n   * @return {Promise}\n   * @example\n   * controller.autoConnect()\n   *   .then(() => {\n   *     // Connected to already paired Arduino\n   *   })\n   *   .catch(error => {\n   *     // Nothing found or found paired Arduino, but it's not connected to computer\n   *   })\n   */\n  autoConnect() {\n    return this.getPairedDevice().then((device) => {\n\n      this.device = device\n\n      return new Promise((resolve, reject) => {\n\n        // USB Device is not connected to the computer\n        if (this.device === undefined) {\n          return reject(new Error('Can not find USB device.'))\n\n        // USB device is connected to the computer, so try to create a WebUSB connection\n        } else {\n          return resolve(this.connect())\n        }\n\n      })\n\n    })\n  }\n\n  /**\n   * Open a connection to the selected USB device and tell the device that\n   * we are ready to send data to it.\n   *\n   * @return {Promise}\n   * @example\n   * controller.connect().then(() => {\n   *   // Successfully created a connection to the selected Arduino\n   * })\n   */\n  connect() {\n    // Open connection\n    return this.device.open()\n\n    // Select #1 configuration if not automatially set by OS\n    .then(() => {\n      if (this.device.configuration === null) {\n        return this.device.selectConfiguration(1)\n      }\n    })\n\n    // Get exclusive access to the #2 interface\n    .then(() => this.device.claimInterface(2))\n\n    // Tell the USB device that we are ready to send data\n    .then(() => this.device.controlTransferOut({\n        // It's a USB class request\n        'requestType': 'class',\n        // The destination of this request is the interface\n        'recipient': 'interface',\n        // CDC: Communication Device Class\n        // 0x22: SET_CONTROL_LINE_STATE\n        // RS-232 signal used to tell the USB device that the computer is now present.\n        'request': 0x22,\n        // Yes\n        'value': 0x01,\n        // Interface #2\n        'index': 0x02\n      })\n    )\n\n    .then(() => {\n      this.readLoop()\n    })\n  }\n\n  /**\n   * Read data from the NeoPixel Controller\n   *\n   * @return {Promise}\n   */\n  readLoop() {\n    // Get data from the USB device on Endpoint #5\n    this.device.transferIn(5, 1).then(result => {\n      var amountLeds = new Uint8Array(result.data.buffer)\n      console.log(`Connected NeoPixels: ${amountLeds}`)\n\n      this.readLoop()\n    }, error => {\n      console.log(error)\n    })\n  }\n\n  /**\n   * Send data to the USB device to update the leds\n   *\n   * @param {Array} data - List containing all leds that should be updated\n   *\n   * @return {Promise}\n   * @example\n   * controller.send([255, 0, 0])\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n\n      // USB Device is not connected to the computer\n      if (this.device === undefined) {\n        return reject(new Error('USB device is not connected to the computer'))\n\n      // USB device is connected to the computer, so try to create a WebUSB connection\n      } else {\n        // Create an ArrayBuffer, because that is needed for WebUSB\n        const buffer = Uint8Array.from(data)\n\n        // Send data on Endpoint #4\n        return resolve(this.device.transferOut(4, buffer))\n      }\n\n    })\n  }\n\n  /**\n   * Update the <code>led</code>(s) of the leds with the provided <code>value</code>\n   *\n   * @param {number} led - The led to update\n   * @param {(number|number[])} value - The value to update the led, supporting two different modes: single (= <code>number</code>) & multi (= <code>Array</code>)\n   * @example <caption>Update a single led</caption>\n   * // Update led #1 with color red (rgb(255, 0, 0))\n   * controller.update(1, [255, 0, 0])\n   * @example <caption>Update multiple leds starting with led</caption>\n   * // Update led #5 with red (rgb(255, 0, 0)), #6 with green (rgb(0, 255, 0))\n   * controller.update(5, [255, 0, 0, 0, 255, 0])\n   */\n  update(led, value) {\n    return new Promise((resolve, reject) => {\n\n      // (led - 1): The LEDs start with led 1, but the array with 0\n      // * 3: Every LED can display an RGB color, so every 3 bytes in the array are one LED\n      led = (led - 1) * 3\n\n      // Multiple\n      if (Array.isArray(value)) {\n        this.leds.splice(led, value.length, ...value)\n      \n      } else {\n        return reject(new Error('Could not update LEDs because the provided value is not of type number[]'))\n      }\n\n      // Send the updated leds to the controller\n      return resolve(this.send(this.leds))\n\n    })\n  }\n\n  /**\n   * Disconnect from the USB device\n   *\n   * Note: The device is still paired to the browser!\n   *\n   * @return {Promise}\n   * @example\n   * controller.disconnect().then(() => {\n   *   // Destroyed connection to USB device, but USB device is still paired with the browser\n   *})\n   */\n  disconnect() {\n    // Declare that we don't want to receive data anymore\n    return this.device.controlTransferOut({\n      // It's a USB class request\n      'requestType': 'class',\n      // The destination of this request is the interface\n      'recipient': 'interface',\n      // CDC: Communication Device Class\n      // 0x22: SET_CONTROL_LINE_STATE\n      // RS-232 signal used to tell the USB device that the computer is not present anymore\n      'request': 0x22,\n      // No\n      'value': 0x01,\n      // Interface #2\n      'index': 0x02\n    })\n\n    // Close the connection to the USB device\n    .then(() => this.device.close())\n  }\n}\n","/**\n * Helper to log messages into an <code>output</code> DOM element and the\n * console in the browser.\n */\nexport default class DevConsole {\n  constructor(args = {}) {\n    // The element to write the log messages to\n    this.output = args.output\n\n    // The element to toggle \"logLedsEnabled\"\n    this.logLedsElement = args.logLedsElement\n\n    // Is logging the content of the universe enabled?\n    this.logLedsEnabled = false\n\n    // Listen for changes to enable / disable \"log universe to console\"\n    this.logLedsElement.addEventListener('change', e => {\n      const { target } = e\n\n      this.logLedsEnabled = target.checked\n    })\n  }\n\n  /**\n   * Log a message to the <code>output</code> and the browser console\n   */\n  log(message, data, type) {\n    let fullMessage = ''\n\n    switch (type) {\n      case 'USBDevice':\n        fullMessage = `${message}: ${data}`\n        break\n\n      case 'array':\n        fullMessage = message + JSON.stringify(data)\n        break\n\n      case 'keyvalue':\n        fullMessage = `${message}: ${data}`\n        break\n\n      default:\n        fullMessage = message + ' ' + data\n    }\n\n    console.log(fullMessage)\n\n    this.output.value += fullMessage + '\\n'\n\n    // Automatically scroll to the bottom\n    this.output.scrollTop = this.output.scrollHeight\n  }\n\n  /*\n   * Basic information about the USB device\n   */\n   logUsbDevice(device) {\n    this.log('---', '', 'string')\n    this.log('Selected device', device.productName, 'USBDevice')\n    this.log('---', '', 'string')\n\n    const { configuration, configurations, deviceClass, deviceProtocol,\n      deviceSubclass, deviceVersionMajor, deviceVersionMinor,\n      deviceVersionSubminor, manufacturerName, opened, productId,\n      productName, serialNumber, usbVersionMajor, usbVersionMinor,\n      usbVersionSubminor, vendorId } = device\n\n    // Convert IDs from decimal to hex\n    const vendorIdHex = vendorId.toString(16)\n    const productIdHex = productId.toString(16)\n\n    this.log('Opened', opened, 'keyvalue')\n    this.log('Vendor ID', `${vendorId} (0x${vendorIdHex})`, 'keyvalue')\n    this.log('Manufacturer Name', manufacturerName, 'keyvalue')\n    this.log('Product ID', `${productId} (0x${productIdHex})`, 'keyvalue')\n    this.log('Product Name', productName, 'keyvalue')\n    this.log('Serialnumber', serialNumber, 'keyvalue')\n\n    this.log('Device Class', deviceClass, 'keyvalue')\n    this.log('Device Protocol', deviceProtocol, 'keyvalue')\n    this.log('Device Subclass', deviceSubclass, 'keyvalue')\n    this.log('Device Version Major', deviceVersionMajor, 'keyvalue')\n    this.log('Device Version Minor', deviceVersionMinor, 'keyvalue')\n    this.log('Device Version Subminor', deviceVersionSubminor, 'keyvalue')\n\n    this.log('USB Version Major', usbVersionMajor, 'keyvalue')\n    this.log('USB Version Minor', usbVersionMinor, 'keyvalue')\n    this.log('USB Version Subminor', usbVersionSubminor, 'keyvalue')\n  }\n\n  /**\n   * The whole content of the universe if <code>logLedsEnabled</code>\n   */\n  logLeds(universe) {\n    if (this.logLedsEnabled) {\n      this.log('', universe, 'array')\n    }\n  }\n}\n"],"sourceRoot":""}